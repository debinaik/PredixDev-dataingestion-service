#properties related to unit testing and running at the command line go here
logging.level.root=INFO
logging.level.org.springframework=INFO
server.port=9191
spring.profiles.active=local

#if you are behind a corporate proxy/firewall and want to access Predix Cloud
#predix.oauth.proxyHost =put.your.proxyHost.here 
#predix.oauth.proxyPort=put.your.proxyPort.here

#OAuth - please see predix-rest-client src/main/java/com/ge/predix/solsvc/restclient/config/OauthRestConfig.java for more info on oauth properties
# e.g. predix.oauth.issuerId.url=https://36492c1e-657c-4377-ac51-add963552460.predix-uaa.cloud.com/oauth/token
predix.oauth.issuerId.url=put.your.uaa.issuerId.here
#you may put client:secret as unencoded cleartext by setting predix.oauth.clientIdEncode=true
predix.oauth.clientIdEncode=false
predix.oauth.clientId=you.should.base64encode(put.your.clientId:put.your.clientSecret separated by a colon)  
 

#asset - get from VCAP env vars by binding an application to your asset instance e.g. cf bind-service <my-app> <my-asset>
#asset - see asset-bootstrap - src/main/java/com/ge/predix/solsvc/bootstrap/ams/common/AssetRestConfig.java for more info on asset properties 
predix.asset.restHost=put.your.asset.service.instance.name.hostname.here
predix.asset.zoneid=put.your.asset.zoneid

#timeseries - get from VCAP env vars by binding an application to your timeseries instance e.g. cf bind-service <my-app> <my-timeseries>
#timeseries - see timeseries-bootstrap - src/main/java/com/ge/predix/solsvc/timeseries/bootstrap/config/TimeseriesRestConfig.java for more info on timeseries properties 
predix.timeseries.queryUrl=https://put.your.timeseries.service.instance.here/v1/datapoints
predix.timeseries.zoneid=put.your.timeseries.zoneid
#websocket for timeseries - get from VCAP env vars by binding an application to your timeseries instance e.g. cf bind-service <my-app> <my-timeseries>
#websocket for timeseries - see websocket-client - src/main/java/com/ge/predix/solsvc/websocket/config/IWebSocketConfig.java for more info on websocket properties 
predix.timeseries.websocket.uri=wss://put.your.timeseries.ingest.uri.here/v1/stream/messages
predix.timeseries.websocket.pool.maxIdle=5
predix.timeseries.websocket.pool.maxActive=5
predix.timeseries.websocket.pool.maxWait=8000

#messages get dropped off at a websocket server too (for a ui to display real-time)
predix.websocket.server.uri=put.your.websocket.server.uri.here
predix.websocket.server.pool.maxIdle=5
predix.websocket.server.pool.maxActive=5
predix.websocket.server.pool.maxWait=8000

# Spring Security adds the following headers to the http response
security.basic.enabled=false
security.headers.cache=true 
# Enable cache control HTTP headers.
security.headers.content-type=true 
# Enable "X-Content-Type-Options" header.
security.headers.frame=true
security.headers.xss=true
security.filter-order=1
